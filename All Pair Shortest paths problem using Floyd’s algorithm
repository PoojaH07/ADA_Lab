#include <stdio.h>
#include <stdlib.h>
#define INF 99999  // A large value representing infinity

void floydWarshall(int graph[][4], int V) {
    // dist[][] will be the output matrix that will store the shortest distance between every pair of vertices
    int dist[V][V];

    // Initialize the distance matrix with the given graph values
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (graph[i][j] == 0 && i != j) {
                dist[i][j] = INF;  // No path
            } else {
                dist[i][j] = graph[i][j];
            }
        }
    }

    // Floyd-Warshall algorithm: update the distance matrix
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the shortest distance matrix
    printf("The shortest distances between every pair of vertices are:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%d ", dist[i][j]);
            }
        }
        printf("\n");
    }
}

int main() {
    // Adjacency matrix representation of the graph
    // graph[i][j] = weight of edge from vertex i to vertex j
    // 0 means no edge (in this case, we represent infinity with a large value)
   
    int graph[4][4] = {
        {0, 3, INF, 7},
        {8, 0, 2, INF},
        {5, INF, 0, 1},
        {2, INF, INF, 0}
    };

    int V = 4; // Number of vertices in the graph

    // Call the Floyd-Warshall algorithm to find shortest paths
    floydWarshall(graph, V);

    return 0;
}
